<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Sidey</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2022-01-03T13:49:47+09:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>[프로그래머스] LV2 더 맵게</title>
   <link href="http://localhost:4000/2021/12/29/algorithm"/>
   <updated>2021-12-29T13:54:00+09:00</updated>
   <id>http://localhost:4000/2021/12/29/algorithm</id>
   <content type="html">&lt;h1 id=&quot;try-1&quot;&gt;Try 1&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def solution(scoville, K):
    
    scoville.sort()
    
    count = 0
    
    while min(scoville) &amp;lt; K:
        if len(scoville) &amp;lt;= 1:
            return -1
        
        first_low_scov = scoville.pop(0)
        second_low_scov = scoville.pop(0)
        mix_scov = first_low_scov + (second_low_scov*2)
        
        
        scoville.append(mix_scov)
        scoville.sort()
        
        count += 1
    
    return count
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;try-2&quot;&gt;Try 2&lt;/h1&gt;
&lt;p&gt;heapq를 사용하지 않고 풀어보려고 했으나 효율성테스트에서 계속 실패해했다.
결국 heapq를 사용했다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import heapq

def solution(scoville, K):
    
    heapq.heapify(scoville)
    
    count = 0
    
    while scoville[0] &amp;lt; K:
        if len(scoville) &amp;lt;= 1:
            return -1
        
        first_low_scov = heapq.heappop(scoville)
        second_low_scov = heapq.heappop(scoville)
        mix_scov = first_low_scov + (second_low_scov*2)
        
        heapq.heappush(scoville, mix_scov)
        count += 1
    
    return count
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;알게된-점&quot;&gt;알게된 점&lt;/h1&gt;
&lt;p&gt;python에서는 heapq 라는 내장 모듈을 통해 리스트를 heap처럼 사용할 수 있다.
heapq는 이진트리 기반의 min heap 자료구조를 제공한다. 가장 작은 값이 항상 이진트리의 root가 되고 모든 원소는 항상 자식 원소보다 작거나 같다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import heapq

# heapq의 주요 메소드
data = [3,6,1,4,8,2.9]

heapq.heapify(scoville)
# data -&amp;gt;[1,2,3,4,6,8,9]

a = heapq.heappop(data) 
# a -&amp;gt; 1
# data -&amp;gt; [2,3,4,6,8,9] 

heapq.heappush(data, 5)
# data -&amp;gt; [2,3,4,5,6,8,9] 
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>[밑시딥] 3. 신경망</title>
   <link href="http://localhost:4000/2021/12/28/dls-3-neural-network"/>
   <updated>2021-12-28T16:27:00+09:00</updated>
   <id>http://localhost:4000/2021/12/28/dls-3-neural-network</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;밑바닥부터 시작하는 딥러닝을 보고 공부한 내용을 정리합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;퍼셉트론&quot;&gt;퍼셉트론&lt;/h2&gt;
&lt;p&gt;CHAPTER 2에서 공부한 다중 퍼셉트론은 XOR같은 복잡한 함수도 표현할 수 있었다. 그렇지만 weight를 사람이 직접 설정해야 한다는 문제가 있다. ANS, OR게이트 정도의 문제는 진리표를 보면서 인간이 적절한 weight를 입력하는게 가능했지만 더 복잡한 문제는 그런 방법으로 해결하기 어렵다. 신경망은 weight의 적절한 값을 데이터로부터 학습한다. CHAPTER 3에서는 신경망이 입력 데이터가 무엇인지 식별하는 처리과정을 알아본다.&lt;/p&gt;

&lt;h2 id=&quot;퍼셉트론-복습&quot;&gt;퍼셉트론 복습&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/how-to-perform-classification-using-a-neural-network-a-simple-perceptron-example_rk_aac_image1.webp&quot; alt=&quot;&quot; /&gt;
위와 같은 구조의 네트워크는 아래의 식으로 나타낼 수 있다.&lt;br /&gt;
\(y=
\begin{cases}
0(w_1x_1+w_2x_2+b\le0) \\
1(w_1x_1+w_2x_2+b&amp;gt;0)
\end{cases}\)&lt;br /&gt;
위 식에서 조건 분기의 동작을 함수로 나타내면 &lt;br /&gt;
\(y = h(w_1x_1+w_2x_2+b)\)&lt;br /&gt;
함수 h를 다시 표현하면 아래와같이 표현할 수 있다.&lt;br /&gt;
\(h(x) = 
\begin{cases}
0(x\le0) \\
1(x&amp;gt;0)
\end{cases}\)&lt;/p&gt;

&lt;h2 id=&quot;활성화함수&quot;&gt;활성화함수&lt;/h2&gt;
&lt;p&gt;위에서 본 $h(x)$ 처럼 입력신호의 총합을 출력신호로 변환하는 함수를 활성화함수(activation funcion)이라고 부른다. 이름 그대로 입력신호의 총합이 활성화를 일으키는지 정하는 역할을 한다.&lt;/p&gt;

&lt;h2 id=&quot;계단함수&quot;&gt;계단함수&lt;/h2&gt;
&lt;p&gt;앞서 설명된 임계치보다 작으면 0, 크면 1을 반환 
\(h(x) = 
\begin{cases}
0(x\le0) \\
1(x&amp;gt;0)
\end{cases}\)
&lt;img src=&quot;/assets/images/image-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;sigmoid-함수&quot;&gt;Sigmoid 함수&lt;/h2&gt;
&lt;p&gt;자연상수를 이용하여 입력신호를 0~1 사이의 실수값으로 반환
\(h(x) = {1 \over 1+e^{-x}}\)
&lt;img src=&quot;/assets/images/image-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;relu&quot;&gt;ReLU&lt;/h2&gt;
&lt;p&gt;나중에 나오는 Gradient Venising 문제를 해결하기 위해 제안된 활성화함수
\(h(x) = \max(0, x)\)
&lt;img src=&quot;/assets/images/image-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;code&quot;&gt;code&lt;/h2&gt;
&lt;script src=&quot;https://gist.github.com/kimjunil/3b83c6e7ad66543715f38c04fbc5bdf5.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;다차원-배열의-계산과-신경망&quot;&gt;다차원 배열의 계산과 신경망&lt;/h2&gt;
&lt;p&gt;신경망은 행렬의 곱으로 계산을 수행할 수 있다.
이때 X와 W의 대응하는 차원의 원소 수가 같아야한다
&lt;img src=&quot;/assets/images/image-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;X = np.array([1,2]) # shape -&amp;gt; (2,)
W = np.array([[1,3,5], [2,4,6]]) # shape -&amp;gt; (2,3)
Y = np.dot(X, W)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;3층-신경망-구현하기&quot;&gt;3층 신경망 구현하기&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/image-5.png&quot; alt=&quot;&quot; /&gt;
\(a^{(1)}_1 = w^{(1)}_{11}x_1 + w^{(1)}_{12}x_2 + b^{(1)}_1 \\
a^{(1)}_2 = w^{(1)}_{21}x_1 + w^{(1)}_{22}x_2 + b^{(1)}_2 \\
a^{(1)}_3 = w^{(1)}_{31}x_1 + w^{(1)}_{32}x_2 + b^{(1)}_3 \\\)
행렬로 표현하면 아래와 같이 표현할 수 있다
\(A = XW^{(1)}+B^{(1)}\)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;X = np.array([1.0, 2.0])
W1 = np.array([0.1, 0.3, 0.5], [0.2, 0.4, 0.6])
B1 = np.array([0.1, 0.2, 0.3])

A1 = np.dot(X, W1)+B1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;code-1&quot;&gt;code&lt;/h2&gt;
&lt;script src=&quot;https://gist.github.com/kimjunil/229699e592ca2ce152ef1b3bcdbba15c.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;출력층-설계하기&quot;&gt;출력층 설계하기&lt;/h2&gt;
&lt;p&gt;분류/회귀 중 어떤 문제냐에 따라 출력층에서 사용하는 활성화함수가 달라진다.
일반적으로 회귀에는 항등함수, 분류에는 소프트맥스 함수를 사용한다.
항등함수는 입력신호 그대로 출력을 하고 소프트맥스 함수는 아래와 같은 식을 사용한다.
\(y_k = {\exp(a_k)\over\sum\limits_{i=1}^n\exp(a_i)}\)&lt;/p&gt;

&lt;h2 id=&quot;소프트맥스-함수-구현&quot;&gt;소프트맥스 함수 구현&lt;/h2&gt;
&lt;p&gt;소프트맥스 함수는 지수함수를 사용하기 때문에 식대로 구현하면 오버플로우가 발생한다.
이 문제를 해결하기위해 수식을 개선한다
\(y_k = {\exp(a_k)\over\sum\limits_{i=1}^n\exp(a_i)}={C\exp(a_k)\over C\sum\limits_{i=1}^n\exp(a_i)} \\
= {\exp(a_k+\log{C})\over\sum\limits_{i=1}^n\exp(a_i+\log{C})}\\
= {\exp(a_k+C&apos;)\over\sum\limits_{i=1}^n\exp(a_i+C&apos;)}\)
위 식은 지수함수를 계산할 때 어떤 정수를 더하거나 빼도 결과는 바뀌지 않는다는 것을 보여준다. $C’$에는 어떤 값을 대입해도 되지만 오버플로우를 막을 목적으로는 입력신호 중 최댓값을 이용하는 것이 일반적이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def softmax(a):
    c = np.max(a)
    exp_a = mp.exp(a-c)
    sum_exp_a = np.sum(exp_a)
    y = exp_a / sum_exp_a
    
    return y
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>[프로그래머스] LV2 짝지어 제거하기</title>
   <link href="http://localhost:4000/2021/12/27/algorithm-003"/>
   <updated>2021-12-27T17:29:00+09:00</updated>
   <id>http://localhost:4000/2021/12/27/algorithm-003</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;https://programmers.co.kr/learn/courses/30/lessons/17677&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;요약&quot;&gt;요약&lt;/h1&gt;
&lt;p&gt;어떤 문자열이 주어졌을 때 문자열 중 같은 알파벳 2개가 붙어있으면 짝을 지어 제거하기를 반복하고 문자열이 모두 제거되면 1, 그렇지 않으면 0을 반환한다.&lt;/p&gt;

&lt;h1 id=&quot;제한-사항&quot;&gt;제한 사항&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;문자열의 길이 : 1,000,000이하의 자연수&lt;/li&gt;
  &lt;li&gt;문자열은 모두 소문자로 이루어져 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;try-1&quot;&gt;Try 1&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def solution(s):
    stack = []
    for i in range(len(s)):
        if len(stack)==0:
            stack.append(s[i])
        else:
            if s[i] == stack[-1]:
                del stack[-1]
            else:
                stack.append(s[i])

    if len(stack) &amp;gt; 0:
        return 0
    else:
        return 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;처음에는 문자열을 반복적으로 탐색하라고 하였으나 구현 중 스택이 더 효율적일 것 같다는 생각이 들어 스택을 이용해 풀었다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[프로그래머스] LV2 뉴스 클러스터링</title>
   <link href="http://localhost:4000/2021/12/23/algorithm-002"/>
   <updated>2021-12-23T12:39:00+09:00</updated>
   <id>http://localhost:4000/2021/12/23/algorithm-002</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;https://programmers.co.kr/learn/courses/30/lessons/17677&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;요약&quot;&gt;요약&lt;/h1&gt;
&lt;p&gt;두개의 문자열이 주어졌을 때 두 문자열의 자카드 유사도를 구하라!&lt;/p&gt;

&lt;h1 id=&quot;제한-사항&quot;&gt;제한 사항&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;각 문자열의 길이는 2 이상, 1,000 이하이다.&lt;/li&gt;
  &lt;li&gt;입력으로 들어온 문자열은 두 글자씩 끊어서 다중집합의 원소로 만든다.
    &lt;ul&gt;
      &lt;li&gt;이때 영문자로 된 글자 쌍만 유효하고, 기타 공백이나 숫자, 특수 문자가 들어있는 경우는 그 글자 쌍을 버린다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;다중집합 원소 사이를 비교할 때, 대문자와 소문자의 차이는 무시한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;자카드-유사도&quot;&gt;자카드 유사도&lt;/h1&gt;
&lt;p&gt;자카드 유사도는 집합 간의 유사도를 검사하는 여러 방법 중의 하나로 알려져 있다. 두 집합 A, B 사이의 자카드 유사도 J(A, B)는 두 집합의 교집합 크기를 두 집합의 합집합 크기로 나눈 값으로 정의된다.&lt;/p&gt;

&lt;h1 id=&quot;try-1&quot;&gt;Try 1&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import re

def solution(str1, str2):
    # 1.소문자 변환
    # 2.각 문자열을 글자쌍 배열로 분리
    # 3.특수문자가 들어있는 원소 제거
    # 4.문자쌍의 교집합/합집합 갯수 계산
    # 5.자카드유사도 계산
    
    str1, str2 = str1.lower(), str2.lower()
    list1 = [str1[i:i+2] for i in range(len(str1)-1)]
    list2 = [str2[i:i+2] for i in range(len(str2)-1)]
    
    list1 = [x for x in list1 if re.match(&quot;[a-z]{2}&quot;, x)!=None]
    list2 = [x for x in list2 if re.match(&quot;[a-z]{2}&quot;, x)!=None]
    
    A, B = list1.copy(), list2.copy()

    intersection = []
    
    for item in B:
        if item in A:
            intersection.append(item)
            A.remove(item)
        else:
            continue

    union = list1+list2
    for item in intersection:
        union.remove(item)
    
    if len(intersection)==0 and len(union)==0:
        return 65536
    else:
        return int(len(intersection)/len(union)*65536)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;인상깊었던-다른사람의-풀이-1&quot;&gt;인상깊었던 다른사람의 풀이 1&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;isalpha() 를 사용하면 정규표현식을 사용하지 않아도 된다.&lt;/li&gt;
  &lt;li&gt;다중집합의 합집합과 교집합을 구하는 과정이 간결하다.
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def solution(str1, str2):
 set1 = [str1[i:i+2].lower() for i in range(len(str1) - 1) if str1[i:i+2].lower().isalpha()]
 set2 = [str2[i:i+2].lower() for i in range(len(str2) - 1) if str2[i:i+2].lower().isalpha()]

 uu = sum([min(set1.count(u), set2.count(u)) for u in list(set(set1) &amp;amp; set(set2))])
 nn = sum([max(set1.count(n), set2.count(n)) for n in list(set(set1) | set(set2))])

 if nn == 0 and uu == 0:
     return 65536
 return int(float(uu)/float(nn) * 65536)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;인상깊었던-다른사람의-풀이-2&quot;&gt;인상깊었던 다른사람의 풀이 2&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;lambda를 사용하였다.
```python
import math
from collections import Counter&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;def solution(str1, str2):
    set1 = Counter([str1[i:i+2].upper() for i in range(0, len(str1)-1) if str1[i:i+2].isalpha()])
    set2 = Counter([str2[i:i+2].upper() for i in range(0, len(str2)-1) if str2[i:i+2].isalpha()])
    J = lambda A, B: 1 if len(A) == 0 and len(B) == 0 else sum((A &amp;amp; B).values()) / sum((A | B).values())
    return math.floor(J(set1, set2) * 65536)
```&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[밑시딥] 2. 퍼셉트론</title>
   <link href="http://localhost:4000/2021/12/22/dls-2-perceptron"/>
   <updated>2021-12-22T06:27:00+09:00</updated>
   <id>http://localhost:4000/2021/12/22/dls-2-perceptron</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;밑바닥부터 시작하는 딥러닝을 보고 공부한 내용을 정리합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;퍼셉트론&quot;&gt;퍼셉트론&lt;/h2&gt;
&lt;p&gt;신경명의 기원이 되는 알고리즘.
다수의 (흐름이 있는)신호를 입력받아 하나의 신호를 출력한다. 
&lt;img src=&quot;/assets/images/how-to-perform-classification-using-a-neural-network-a-simple-perceptron-example_rk_aac_image1.webp&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;&lt;a href=&quot;https://www.allaboutcircuits.com/technical-articles/how-to-perform-classification-using-a-neural-network-a-simple-perceptron-example/&quot;&gt;출처&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;노드의 입력과 weight를 곱한 것을 모두 합한 값이 임계치(θ)를 넘기면 1을 출력하고 그렇지 않으면 0을 출력한다.&lt;br /&gt;
이를 수식으로 표현하면 다음과 같다.&lt;br /&gt;
\(y = 
\begin{cases}
0(w_1x_1+w_2x_2\le\theta) \\
1(w_1x_1+w_2x_2&amp;gt;\theta)
\end{cases}\)&lt;/p&gt;

&lt;p&gt;퍼셉트론은 입력신호 각각에 고유한 weight를 부여하고 이것은 각 신호가 결과에 주는 영향력을 조절하는 요소로 작용한다.&lt;/p&gt;

&lt;p&gt;위 식에서 θ를 -b(bias)로 치환하면 아래와 같은 식이 된다.&lt;br /&gt;
\(y=
\begin{cases}
0(w_1x_1+w_2x_2+b\le0) \\
1(w_1x_1+w_2x_2+b&amp;gt;0)
\end{cases}\)&lt;br /&gt;
다시 말하면 weight는 각 입력신호가 결과에 주는 영향력, bias는 뉴런이 얼마나 쉽게 활성화하는지를 결정한다.&lt;/p&gt;

&lt;h1 id=&quot;퍼셉트론의-한계&quot;&gt;퍼셉트론의 한계&lt;/h1&gt;
&lt;p&gt;퍼셉트론은 직선으로 분류할 수 있는 AND, NAND, OR 논리회로를 표현할 수 있지만 비선형적인 XOR 게이트 같은 것들은 표현할 수 없다.
&lt;img src=&quot;/assets/images/1_Tc8UgR_fjI_h0p3y4H9MwA.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;&lt;a href=&quot;https://yceffort.kr/2019/02/19/pytorch-03-perceptron&quot;&gt;출처&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;다층-퍼셉트론&quot;&gt;다층 퍼셉트론&lt;/h1&gt;
&lt;p&gt;아래 그림과 같이 퍼셉트론을 여러층 쌓는다면 단층 퍼셉트론으로는 표현할 수 없는 비선형 영역도 표현할 수 있다.
&lt;img src=&quot;/assets/images/xor_solution.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/images/xor_2layers.png&quot; alt=&quot;&quot; /&gt;
이처럼 퍼셉트론은 층을 깊게하여 더 다양한 것을 표현할 수 있다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>[프로그래머스] LV2 전화번호 목록</title>
   <link href="http://localhost:4000/2021/12/21/algorithm-001"/>
   <updated>2021-12-21T16:04:00+09:00</updated>
   <id>http://localhost:4000/2021/12/21/algorithm-001</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;https://programmers.co.kr/learn/courses/30/lessons/42577&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;요약&quot;&gt;요약&lt;/h1&gt;
&lt;p&gt;숫자로 이루어진 문자열 리스트가 주어졌을 때 어떤 문자열이 다른 문자열의 접두어가 될 수 있는지 Boolean으로 반환한다.&lt;/p&gt;

&lt;h1 id=&quot;제한-사항&quot;&gt;제한 사항&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;phone_book의 길이는 1 이상 1,000,000 이하
    &lt;ul&gt;
      &lt;li&gt;각 전화번호의 길이는 1 이상 20 이하&lt;/li&gt;
      &lt;li&gt;같은 전화번호가 중복되지 않는다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;try-1&quot;&gt;Try 1&lt;/h1&gt;
&lt;p&gt;효율성은 고려하지 않고 직관적으로 생각나는대로 만들어본 코드&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def solution(phone_book):
    phone_book = sorted(phone_book)
    for i, a in enumerate(phone_book):
        for b in phone_book[i+1:]:
            if b.startswith(a):
                return False
            
    return True
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;정확성 테스트 15/15&lt;/li&gt;
  &lt;li&gt;효율성 테스트 2/4&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;try-2&quot;&gt;Try 2&lt;/h1&gt;
&lt;p&gt;길이가 가장 긴 전화번호는 다른 번호의 접두어가 될 수 없으므로 무시한다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def solution(phone_book):
    phone_book = sorted(phone_book)
    max_len = len(max(phone_book, key=len))
    for i, a in enumerate(phone_book):
        if len(a) &amp;gt;= max_len:
            continue
        for b in [x for x in phone_book[i+1:]]:
            if b.startswith(a):
                return False
            
    return True
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;정확성 테스트 15/15&lt;/li&gt;
  &lt;li&gt;효율성 테스트 3/4&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;try-3&quot;&gt;Try 3&lt;/h1&gt;
&lt;p&gt;문제의 카테고리가 해시인 것에 착안하여 접근한 풀이&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def solution(phone_book):
    dic = {x:idx for idx, x in enumerate(phone_book)}
    
    for i in range(len(phone_book)):
        for j in range(len(phone_book[i])):
            if dic.get(phone_book[i][:j]) != None:
                return False
            
    return True
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;정확성 테스트 15/15&lt;/li&gt;
  &lt;li&gt;효율성 테스트 4/4&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>CSS hacks you may not know</title>
   <link href="http://localhost:4000/2014/05/12/css-hacks-you-may-not-know"/>
   <updated>2014-05-12T00:00:00+09:00</updated>
   <id>http://localhost:4000/2014/05/12/css-hacks-you-may-not-know</id>
   <content type="html">&lt;p&gt;Lorem ipsum dolor amet tousled viral art party blue bottle single-origin coffee cardigan, selvage man braid helvetica. Banh mi taxidermy meditation microdosing. Selvage cornhole YOLO, small batch vexillologist raclette VHS prism sustainable 8-bit ugh semiotics letterpress disrupt pop-up. Celiac shabby chic ugh, jianbing whatever kitsch tattooed edison bulb kogi irony etsy.&lt;/p&gt;

&lt;p&gt;Franzen polaroid hammock iceland blue bottle woke disrupt tilde kale chips raw denim ramps vaporware before they sold out irony. Narwhal vaporware offal shaman celiac kinfolk activated charcoal salvia lomo irony readymade normcore. Yr activated charcoal kombucha, man braid whatever biodiesel hella crucifix adaptogen bicycle rights small batch skateboard mixtape. Hot chicken sustainable green juice 90’s. Ennui kickstarter hella pug, meggings man bun shaman messenger bag. Chambray adaptogen kombucha pug affogato, kogi green juice distillery ugh banh mi.&lt;/p&gt;

&lt;p&gt;VHS roof party waistcoat cold-pressed, street art wolf master cleanse affogato franzen. Shaman iceland pour-over intelligentsia typewriter tilde, pitchfork copper mug. Wayfarers kickstarter adaptogen vinyl beard kombucha. Organic pinterest master cleanse, mixtape fam gentrify lo-fi kogi.&lt;/p&gt;

&lt;p&gt;Salvia blue bottle fanny pack mlkshk normcore YOLO viral umami four dollar toast skateboard. Chambray taxidermy slow-carb street art chartreuse. Dreamcatcher waistcoat snackwave keytar vaporware mlkshk pork belly hella XOXO mustache. Tattooed semiotics edison bulb, disrupt polaroid craft beer vape enamel pin bespoke flannel letterpress brooklyn subway tile copper mug. Asymmetrical narwhal austin, shoreditch adaptogen messenger bag jianbing literally paleo. Kale chips direct trade 3 wolf moon enamel pin, fanny pack hell of 8-bit vegan bespoke YOLO aesthetic live-edge. Retro succulents before they sold out whatever bushwick.&lt;/p&gt;

&lt;p&gt;Actually hella you probably haven’t heard of them quinoa try-hard la croix. Street art schlitz actually hell of pour-over air plant. Post-ironic franzen brunch mumblecore readymade. Food truck photo booth polaroid, gochujang vegan street art yr before they sold out man bun. Tilde selfies chia pitchfork everyday carry post-ironic mumblecore sartorial VHS master cleanse activated charcoal biodiesel williamsburg cronut jean shorts. Poutine helvetica keffiyeh butcher pop-up.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.♫ { background: #222; color: #FFF; } 
.ಠ_ಠ { background: #ccc; color: #fff; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lorem ipsum dolor amet tousled viral art party blue bottle single-origin coffee cardigan, selvage man braid helvetica. Banh mi taxidermy meditation microdosing. Selvage cornhole YOLO, small batch vexillologist raclette VHS prism sustainable 8-bit ugh semiotics letterpress disrupt pop-up. Celiac shabby chic ugh, jianbing whatever kitsch tattooed edison bulb kogi irony etsy.&lt;/p&gt;

&lt;p&gt;Franzen polaroid hammock iceland blue bottle woke disrupt tilde kale chips raw denim ramps vaporware before they sold out irony. Narwhal vaporware offal shaman celiac kinfolk activated charcoal salvia lomo irony readymade normcore. Yr activated charcoal kombucha, man braid whatever biodiesel hella crucifix adaptogen bicycle rights small batch skateboard mixtape. Hot chicken sustainable green juice 90’s. Ennui kickstarter hella pug, meggings man bun shaman messenger bag. Chambray adaptogen kombucha pug affogato, kogi green juice distillery ugh banh mi.&lt;/p&gt;

&lt;p&gt;VHS roof party waistcoat cold-pressed, street art wolf master cleanse affogato franzen. Shaman iceland pour-over intelligentsia typewriter tilde, pitchfork copper mug. Wayfarers kickstarter adaptogen vinyl beard kombucha. Organic pinterest master cleanse, mixtape fam gentrify lo-fi kogi.&lt;/p&gt;

&lt;p&gt;Salvia blue bottle fanny pack mlkshk normcore YOLO viral umami four dollar toast skateboard. Chambray taxidermy slow-carb street art chartreuse. Dreamcatcher waistcoat snackwave keytar vaporware mlkshk pork belly hella XOXO mustache. Tattooed semiotics edison bulb, disrupt polaroid craft beer vape enamel pin bespoke flannel letterpress brooklyn subway tile copper mug. Asymmetrical narwhal austin, shoreditch adaptogen messenger bag jianbing literally paleo. Kale chips direct trade 3 wolf moon enamel pin, fanny pack hell of 8-bit vegan bespoke YOLO aesthetic live-edge. Retro succulents before they sold out whatever bushwick.&lt;/p&gt;

&lt;p&gt;Actually hella you probably haven’t heard of them quinoa try-hard la croix. Street art schlitz actually hell of pour-over air plant. Post-ironic franzen brunch mumblecore readymade. Food truck photo booth polaroid, gochujang vegan street art yr before they sold out man bun. Tilde selfies chia pitchfork everyday carry post-ironic mumblecore sartorial VHS master cleanse activated charcoal biodiesel williamsburg cronut jean shorts. Poutine helvetica keffiyeh butcher pop-up.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;a { text-decoration: overline red wavy; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lorem ipsum dolor amet tousled viral art party blue bottle single-origin coffee cardigan, selvage man braid helvetica. Banh mi taxidermy meditation microdosing. Selvage cornhole YOLO, small batch vexillologist raclette VHS prism sustainable 8-bit ugh semiotics letterpress disrupt pop-up. Celiac shabby chic ugh, jianbing whatever kitsch tattooed edison bulb kogi irony etsy.&lt;/p&gt;

&lt;p&gt;Franzen polaroid hammock iceland blue bottle woke disrupt tilde kale chips raw denim ramps vaporware before they sold out irony. Narwhal vaporware offal shaman celiac kinfolk activated charcoal salvia lomo irony readymade normcore. Yr activated charcoal kombucha, man braid whatever biodiesel hella crucifix adaptogen bicycle rights small batch skateboard mixtape. Hot chicken sustainable green juice 90’s. Ennui kickstarter hella pug, meggings man bun shaman messenger bag. Chambray adaptogen kombucha pug affogato, kogi green juice distillery ugh banh mi.&lt;/p&gt;

&lt;p&gt;VHS roof party waistcoat cold-pressed, street art wolf master cleanse affogato franzen. Shaman iceland pour-over intelligentsia typewriter tilde, pitchfork copper mug. Wayfarers kickstarter adaptogen vinyl beard kombucha. Organic pinterest master cleanse, mixtape fam gentrify lo-fi kogi.&lt;/p&gt;

&lt;p&gt;Salvia blue bottle fanny pack mlkshk normcore YOLO viral umami four dollar toast skateboard. Chambray taxidermy slow-carb street art chartreuse. Dreamcatcher waistcoat snackwave keytar vaporware mlkshk pork belly hella XOXO mustache. Tattooed semiotics edison bulb, disrupt polaroid craft beer vape enamel pin bespoke flannel letterpress brooklyn subway tile copper mug. Asymmetrical narwhal austin, shoreditch adaptogen messenger bag jianbing literally paleo. Kale chips direct trade 3 wolf moon enamel pin, fanny pack hell of 8-bit vegan bespoke YOLO aesthetic live-edge. Retro succulents before they sold out whatever bushwick.&lt;/p&gt;

&lt;p&gt;Actually hella you probably haven’t heard of them quinoa try-hard la croix. Street art schlitz actually hell of pour-over air plant. Post-ironic franzen brunch mumblecore readymade. Food truck photo booth polaroid, gochujang vegan street art yr before they sold out man bun. Tilde selfies chia pitchfork everyday carry post-ironic mumblecore sartorial VHS master cleanse activated charcoal biodiesel williamsburg cronut jean shorts. Poutine helvetica keffiyeh butcher pop-up.&lt;/p&gt;
</content>
 </entry>
 

</feed>
